[
    {
        "question": "¿Cuál es el propósito del módulo `subprocess` en Python?",
        "type": "multiple-choice",
        "options": [
            "Crear interfaces gráficas de usuario.",
            "Administrar procesos y ejecutar nuevos programas.",
            "Manejar conexiones de red.",
            "Realizar operaciones matemáticas complejas."
        ],
        "answer": 1,
        "explanation": "El módulo `subprocess` permite ejecutar nuevos programas y administrar procesos."
    },
    {
        "question": "En el código `p = subprocess.Popen(['ping', 'www.example.com'])`, ¿qué hace `Popen`?",
        "type": "multiple-choice",
        "options": [
            "Ejecuta un comando en una nueva ventana.",
            "Abre un archivo.",
            "Inicia un proceso que ejecuta el comando dado.",
            "Finaliza un proceso existente."
        ],
        "answer": 2,
        "explanation": "`Popen` inicia un nuevo proceso que ejecuta el comando especificado."
    },
    {
        "question": "¿Qué método se utiliza para esperar a que un proceso hijo termine en Python?",
        "type": "multiple-choice",
        "options": [
            "`wait()`",
            "`join()`",
            "`terminate()`",
            "`communicate()`"
        ],
        "answer": 0,
        "explanation": "El método `wait()` espera a que el proceso hijo termine su ejecución."
    },
    {
        "question": "¿Qué módulo se utiliza para crear sockets en Python?",
        "type": "multiple-choice",
        "options": [
            "`socketserver`",
            "`socket`",
            "`sockets`",
            "`network`"
        ],
        "answer": 1,
        "explanation": "El módulo `socket` se utiliza para crear y manejar sockets en Python."
    },
    {
        "question": "En el contexto de sockets, ¿qué significa `AF_INET`?",
        "type": "multiple-choice",
        "options": [
            "Protocolo de IPv6.",
            "Familia de direcciones para IPv4.",
            "Tipo de socket para conexiones locales.",
            "Protocolo de transmisión de archivos."
        ],
        "answer": 1,
        "explanation": "`AF_INET` es la familia de direcciones para IPv4."
    },
    {
        "question": "¿Para qué se utiliza la función `bind()` en sockets?",
        "type": "multiple-choice",
        "options": [
            "Conectar el socket a una dirección remota.",
            "Enviar datos a través del socket.",
            "Asociar el socket a una dirección local y puerto.",
            "Escuchar conexiones entrantes."
        ],
        "answer": 2,
        "explanation": "`bind()` asocia el socket a una dirección local y puerto específicos."
    },
    {
        "question": "En programación concurrente, ¿qué es un 'lock' o bloqueo?",
        "type": "multiple-choice",
        "options": [
            "Un error de ejecución.",
            "Un mecanismo para sincronizar el acceso a recursos compartidos.",
            "Una función para acelerar procesos.",
            "Una técnica para evitar el uso de memoria compartida."
        ],
        "answer": 1,
        "explanation": "Un 'lock' es un mecanismo que sincroniza el acceso a recursos compartidos entre hilos."
    },
    {
        "question": "¿Cuál es la diferencia principal entre hilos ('threads') y procesos ('processes')?",
        "type": "multiple-choice",
        "options": [
            "Los hilos comparten memoria; los procesos tienen espacios de memoria separados.",
            "Los procesos son más ligeros que los hilos.",
            "No hay diferencia entre ellos.",
            "Los hilos solo se usan en sistemas UNIX."
        ],
        "answer": 0,
        "explanation": "Los hilos comparten el mismo espacio de memoria, mientras que los procesos tienen espacios separados."
    },
    {
        "question": "¿Qué método se utiliza para iniciar un hilo en Python?",
        "type": "multiple-choice",
        "options": [
            "`run()`",
            "`start()`",
            "`init()`",
            "`execute()`"
        ],
        "answer": 1,
        "explanation": "El método `start()` inicia la ejecución del hilo."
    },
    {
        "question": "En el código `t = threading.Thread(target=func)`, ¿qué hace `target=func`?",
        "type": "multiple-choice",
        "options": [
            "Establece el nombre del hilo.",
            "Asigna la función que ejecutará el hilo.",
            "Inicia el hilo automáticamente.",
            "Define los argumentos del hilo."
        ],
        "answer": 1,
        "explanation": "`target=func` asigna la función `func` como la tarea que ejecutará el hilo."
    },
    {
        "question": "En Python, el módulo utilizado para crear hilos es `__________`.",
        "type": "fill-in-the-blank",
        "answer": "threading",
        "explanation": "El módulo `threading` se utiliza para trabajar con hilos en Python."
    },
    {
        "question": "El método `__________` se utiliza para esperar a que un hilo termine su ejecución.",
        "type": "fill-in-the-blank",
        "answer": "join()",
        "explanation": "`join()` hace que el hilo principal espere a que el hilo especificado termine."
    },
    {
        "question": "Para crear un socket TCP en Python, se utiliza `socket.socket(socket.AF_INET, socket.__________)`.",
        "type": "fill-in-the-blank",
        "answer": "SOCK_STREAM",
        "explanation": "`SOCK_STREAM` indica que el socket es de tipo TCP."
    },
    {
        "question": "La función `__________` se utiliza para aceptar conexiones entrantes en un socket servidor.",
        "type": "fill-in-the-blank",
        "answer": "accept()",
        "explanation": "`accept()` espera y acepta una conexión entrante."
    },
    {
        "question": "El módulo `__________` en Python permite ejecutar comandos del sistema y crear nuevos procesos.",
        "type": "fill-in-the-blank",
        "answer": "subprocess",
        "explanation": "El módulo `subprocess` permite la creación y gestión de nuevos procesos."
    },
    {
        "question": "¿Cuál de los siguientes códigos es correcto para crear un proceso en Python que ejecute `notepad.exe`?",
        "type": "code",
        "code": "",
        "options": [
            "subprocess.run(['notepad.exe'])",
            "subprocess.execute('notepad.exe')",
            "os.system('notepad.exe')",
            "threading.Thread(target='notepad.exe').start()"
        ],
        "answer": 0,
        "explanation": "`subprocess.run(['notepad.exe'])` es la forma correcta de ejecutar `notepad.exe`."
    },
    {
        "question": "En el siguiente código, ¿cuál es el resultado?",
        "type": "code",
        "code": "import threading\n\ndef tarea():\n    print('Hola')\n\nt = threading.Thread(target=tarea)\nt.start()",
        "options": [
            "Imprime 'Hola' en un hilo separado.",
            "No hace nada.",
            "Genera un error.",
            "Imprime 'Hola' en el hilo principal."
        ],
        "answer": 0,
        "explanation": "El código crea un hilo que imprime 'Hola'."
    },
    {
        "question": "¿Qué hace el siguiente código?",
        "type": "code",
        "code": "with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n    s.connect(('localhost', 2000))\n    s.sendall(b'Hola')",
        "options": [
            "Crea un socket UDP y envía 'Hola'.",
            "Crea un socket TCP y envía 'Hola' al puerto 2000.",
            "Crea un servidor que escucha en el puerto 2000.",
            "Lee datos del puerto 2000."
        ],
        "answer": 1,
        "explanation": "El código crea un socket TCP cliente y envía datos al servidor en el puerto 2000."
    },
    {
        "question": "¿Cuál es el propósito de `os.fork()` en sistemas UNIX?",
        "type": "multiple-choice",
        "options": [
            "Crear un nuevo proceso hijo.",
            "Terminar un proceso existente.",
            "Pausar la ejecución de un proceso.",
            "Crear un nuevo hilo."
        ],
        "answer": 0,
        "explanation": "`os.fork()` crea un nuevo proceso hijo duplicando el proceso padre."
    },
    {
        "question": "En el siguiente código, ¿qué imprime?",
        "type": "code",
        "code": "import threading\n\ndef mostrar():\n    print(threading.current_thread().name)\n\nt = threading.Thread(target=mostrar, name='MiHilo')\nt.start()",
        "options": [
            "`MainThread`",
            "`MiHilo`",
            "Un identificador numérico del hilo.",
            "Genera un error."
        ],
        "answer": 1,
        "explanation": "El hilo imprimirá su nombre, que es 'MiHilo'."
    },
    {
        "question": "Completa el código para crear un hilo que ejecute la función `mi_funcion`:",
        "type": "fill-in-the-blank",
        "code": "import threading\n\ndef mi_funcion():\n    pass\n\nt = threading.Thread(______________)\nt.start()",
        "answer": "target=mi_funcion",
        "explanation": "Se debe especificar la función a ejecutar usando `target=mi_funcion`."
    },
    {
        "question": "En el contexto de un lock, completa el código para adquirir y liberar el lock:",
        "type": "fill-in-the-blank",
        "code": "lock = threading.Lock()\nlock.acquire()\ntry:\n    # Operaciones seguras\n    pass\nfinally:\n    __________",
        "answer": "lock.release()",
        "explanation": "Siempre se debe liberar el lock con `lock.release()` en el bloque `finally`."
    },
    {
        "question": "Completa el código para crear un socket servidor que escuche conexiones entrantes:",
        "type": "fill-in-the-blank",
        "code": "import socket\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind(('localhost', 2000))\n__________",
        "answer": "s.listen()",
        "explanation": "`s.listen()` pone el socket en modo de escucha."
    },
    {
        "question": "Completa el código para enviar datos a través de un socket:",
        "type": "fill-in-the-blank",
        "code": "s.sendall(__________)",
        "answer": "b'Datos a enviar'",
        "explanation": "Se envían datos binarios, por lo que se usa una cadena de bytes."
    },
    {
        "question": "Completa el código para leer datos de un socket:",
        "type": "fill-in-the-blank",
        "code": "data = s.recv(__________)",
        "answer": "1024",
        "explanation": "`recv(1024)` lee hasta 1024 bytes de datos del socket."
    },
    {
        "question": "¿Qué hace el método `Popen.communicate()` en el módulo `subprocess`?",
        "type": "multiple-choice",
        "options": [
            "Enviar datos al proceso y leer su salida.",
            "Terminar el proceso.",
            "Pausar el proceso.",
            "Reiniciar el proceso."
        ],
        "answer": 0,
        "explanation": "`communicate()` interactúa con el proceso: envía datos y lee su salida."
    },
    {
        "question": "¿Cuál es la diferencia entre `threading.Lock()` y `threading.RLock()`?",
        "type": "multiple-choice",
        "options": [
            "`Lock` permite múltiples adquisiciones en el mismo hilo; `RLock` no.",
            "`RLock` permite múltiples adquisiciones en el mismo hilo; `Lock` no.",
            "No hay diferencia entre ellos.",
            "`RLock` es más eficiente que `Lock`."
        ],
        "answer": 1,
        "explanation": "`RLock` es un lock reentrante que permite que el mismo hilo lo adquiera múltiples veces."
    },
    {
        "question": "En programación de sockets, ¿qué método se utiliza para convertir un nombre de host en una dirección IP?",
        "type": "multiple-choice",
        "options": [
            "`socket.gethostname()`",
            "`socket.gethostbyname()`",
            "`socket.getaddrinfo()`",
            "`socket.gethostbyaddr()`"
        ],
        "answer": 1,
        "explanation": "`socket.gethostbyname()` resuelve un nombre de host a una dirección IP."
    },
    {
        "question": "¿Para qué se utiliza el método `starttls()` en el módulo `smtplib`?",
        "type": "multiple-choice",
        "options": [
            "Enviar correos electrónicos.",
            "Iniciar una conexión segura TLS.",
            "Finalizar una conexión SMTP.",
            "Autenticar al usuario."
        ],
        "answer": 1,
        "explanation": "`starttls()` inicia una conexión segura usando TLS."
    },
    {
        "question": "En el módulo `multiprocessing`, ¿qué hace la clase `Queue`?",
        "type": "multiple-choice",
        "options": [
            "Sincroniza hilos.",
            "Permite la comunicación entre procesos.",
            "Crea un nuevo proceso.",
            "Maneja excepciones entre procesos."
        ],
        "answer": 1,
        "explanation": "`multiprocessing.Queue` permite compartir datos entre procesos."
    },
    {
        "question": "En el siguiente código, ¿qué imprime?",
        "type": "code",
        "code": "import threading\n\nx = 0\n\ndef incrementar():\n    global x\n    x += 1\n\nthreads = []\nfor _ in range(100):\n    t = threading.Thread(target=incrementar)\n    threads.append(t)\n    t.start()\n\nfor t in threads:\n    t.join()\n\nprint(x)",
        "options": [
            "0",
            "100",
            "Un número entre 1 y 100",
            "1"
        ],
        "answer": 2,
        "explanation": "Debido a condiciones de carrera, el valor final de `x` puede ser inconsistente."
    },
    {
        "question": "¿Qué hace el método `socket.listen()` en un socket servidor?",
        "type": "multiple-choice",
        "options": [
            "Acepta conexiones entrantes.",
            "Espera datos del cliente.",
            "Coloca el socket en modo de escucha para aceptar conexiones.",
            "Cierra el socket."
        ],
        "answer": 2,
        "explanation": "`listen()` permite que el socket acepte conexiones entrantes."
    },
    {
        "question": "En el contexto de hilos, ¿qué es una condición de carrera ('race condition')?",
        "type": "multiple-choice",
        "options": [
            "Una situación donde varios hilos compiten por recursos y el resultado depende del orden de ejecución.",
            "Un método para acelerar hilos.",
            "Un error que impide la creación de hilos.",
            "Una técnica para sincronizar hilos."
        ],
        "answer": 0,
        "explanation": "Una condición de carrera ocurre cuando el resultado depende del orden de ejecución de los hilos."
    },
    {
        "question": "¿Cuál es el resultado de ejecutar `os.system('dir')` en Windows?",
        "type": "multiple-choice",
        "options": [
            "Muestra el directorio actual en la consola.",
            "Cambia al directorio raíz.",
            "Abre una nueva ventana de terminal.",
            "No hace nada."
        ],
        "answer": 0,
        "explanation": "`os.system('dir')` ejecuta el comando `dir`, mostrando el contenido del directorio actual."
    },
    {
        "question": "En el módulo `asyncio`, ¿qué es una 'corutina'?",
        "type": "multiple-choice",
        "options": [
            "Una función que puede pausar y reanudar su ejecución.",
            "Un tipo de hilo especial.",
            "Un proceso del sistema operativo.",
            "Una excepción en programación asíncrona."
        ],
        "answer": 0,
        "explanation": "Una corutina es una función asíncrona que puede esperar (`await`) y ceder el control."
    },
    {
        "question": "Para crear un servidor UDP en Python, se utiliza `socket.SOCK_________`.",
        "type": "fill-in-the-blank",
        "answer": "DGRAM",
        "explanation": "`SOCK_DGRAM` indica que el socket es de tipo UDP."
    },
    {
        "question": "El método `__________` se utiliza para cerrar un socket en Python.",
        "type": "fill-in-the-blank",
        "answer": "close()",
        "explanation": "`close()` libera los recursos asociados al socket."
    },
    {
        "question": "En programación de hilos, un `__________` es una señal utilizada para notificar a los hilos de algún evento.",
        "type": "fill-in-the-blank",
        "answer": "Event",
        "explanation": "`Event` es una clase que permite la comunicación entre hilos mediante señales."
    },
    {
        "question": "El método `subprocess.Popen` devuelve un objeto que representa el __________ creado.",
        "type": "fill-in-the-blank",
        "answer": "proceso",
        "explanation": "`Popen` devuelve un objeto que permite interactuar con el proceso creado."
    },
    {
        "question": "En Python, los hilos creados con `threading.Thread` son de tipo __________.",
        "type": "fill-in-the-blank",
        "answer": "hilos de nivel de usuario",
        "explanation": "Son hilos manejados por el intérprete de Python, también conocidos como hilos de nivel de usuario."
    },
    {
        "question": "¿Qué es un 'deadlock' en programación concurrente?",
        "type": "multiple-choice",
        "options": [
            "Un estado donde los hilos progresan indefinidamente.",
            "Una situación donde dos o más hilos están bloqueados esperando recursos que otros hilos tienen.",
            "Un tipo de excepción.",
            "Un método para mejorar el rendimiento."
        ],
        "answer": 1,
        "explanation": "Un deadlock ocurre cuando hilos esperan indefinidamente por recursos bloqueados por otros."
    },
    {
        "question": "¿Cuál es la función de `socket.gethostbyaddr()` en Python?",
        "type": "multiple-choice",
        "options": [
            "Devuelve el nombre de host dado una dirección IP.",
            "Convierte un nombre de host en una dirección IP.",
            "Devuelve información sobre el protocolo.",
            "No es una función válida."
        ],
        "answer": 0,
        "explanation": "`gethostbyaddr()` resuelve una dirección IP a un nombre de host."
    },
    {
        "question": "En el contexto de programación de sockets, ¿qué significa 'listening'?",
        "type": "multiple-choice",
        "options": [
            "Enviar datos.",
            "Esperar conexiones entrantes.",
            "Cerrar el socket.",
            "Conectarse a un servidor."
        ],
        "answer": 1,
        "explanation": "Estar en modo 'listening' significa que el socket espera conexiones entrantes."
    },
    {
        "question": "¿Para qué se utiliza el método `terminate()` en el módulo `multiprocessing`?",
        "type": "multiple-choice",
        "options": [
            "Iniciar un nuevo proceso.",
            "Esperar a que un proceso termine.",
            "Finalizar un proceso.",
            "Reiniciar un proceso."
        ],
        "answer": 2,
        "explanation": "`terminate()` finaliza un proceso de forma abrupta."
    },
    {
        "question": "En programación concurrente, ¿qué es un 'semaforo'?",
        "type": "multiple-choice",
        "options": [
            "Un contador que controla el acceso a uno o más recursos.",
            "Una función para pausar hilos.",
            "Un tipo de excepción.",
            "Un hilo especial."
        ],
        "answer": 0,
        "explanation": "Un semáforo es un mecanismo de sincronización que controla el acceso a recursos compartidos."
    },
    {
        "question": "Completa el código para utilizar un semáforo en hilos:",
        "type": "fill-in-the-blank",
        "code": "semaphore = threading.Semaphore(5)\n\ndef tarea():\n    __________\n    # Operaciones\n    semaphore.release()",
        "answer": "semaphore.acquire()",
        "explanation": "Se adquiere el semáforo con `acquire()` antes de realizar operaciones."
    },
    {
        "question": "Completa el código para manejar excepciones en procesos:",
        "type": "fill-in-the-blank",
        "code": "try:\n    process = subprocess.Popen(['comando'], __________)\nexcept subprocess.CalledProcessError as e:\n    print(e.output)",
        "answer": "stdout=subprocess.PIPE, stderr=subprocess.PIPE",
        "explanation": "Se redirige la salida estándar y de error para capturar cualquier mensaje."
    },
    {
        "question": "Completa el código para iniciar una conexión SSL en un socket:",
        "type": "fill-in-the-blank",
        "code": "import ssl\ncontext = ssl.create_default_context()\nwith socket.create_connection((host, port)) as sock:\n    with context.wrap_socket(sock, __________) as ssock:\n        pass",
        "answer": "server_hostname=host",
        "explanation": "Se especifica el nombre del host del servidor para la verificación SSL."
    },
    {
        "question": "Completa el código para crear un proceso en el módulo `multiprocessing`:",
        "type": "fill-in-the-blank",
        "code": "from multiprocessing import Process\n\ndef funcion_proceso():\n    pass\n\nif __name__ == '__main__':\n    p = Process(__________)\n    p.start()",
        "answer": "target=funcion_proceso",
        "explanation": "Se define la función que el proceso ejecutará usando `target=funcion_proceso`."
    },
    {
        "question": "Completa el código para usar un `Event` en hilos:",
        "type": "fill-in-the-blank",
        "code": "event = threading.Event()\n\ndef esperar_evento():\n    event.wait()\n    # Continuar ejecución\n\ndef set_evento():\n    __________",
        "answer": "event.set()",
        "explanation": "`event.set()` activa el evento, permitiendo que los hilos que esperan continúen."
    },
    {
        "question": "¿Cuál de las siguientes opciones NO es un método para crear procesos en Python?",
        "type": "multiple-choice",
        "options": [
            "os.fork()",
            "multiprocessing.Process()",
            "threading.Thread()",
            "subprocess.Popen()"
        ],
        "answer": 2,
        "explanation": "El módulo 'threading' se utiliza para crear hilos, no procesos."
    },
    {
        "question": "En programación de sockets, ¿qué significa 'binding'?",
        "type": "multiple-choice",
        "options": [
            "Cerrar un socket.",
            "Asociar un socket a una dirección y puerto específicos.",
            "Enviar datos a través de un socket.",
            "Escuchar conexiones entrantes."
        ],
        "answer": 1,
        "explanation": "El 'binding' asocia un socket a una dirección IP y un puerto."
    },
    {
        "question": "¿Qué módulo en Python se utiliza para trabajar con colas de mensajes seguras entre hilos?",
        "type": "multiple-choice",
        "options": [
            "queue",
            "collections",
            "threading",
            "socket"
        ],
        "answer": 0,
        "explanation": "El módulo 'queue' proporciona colas seguras para la comunicación entre hilos."
    },
    {
        "question": "En el contexto de hilos, ¿qué es un 'daemon thread'?",
        "type": "multiple-choice",
        "options": [
            "Un hilo que se ejecuta en primer plano.",
            "Un hilo que se ejecuta en segundo plano y termina cuando lo hace el hilo principal.",
            "Un hilo que nunca termina.",
            "Un hilo que tiene mayor prioridad que otros."
        ],
        "answer": 1,
        "explanation": "Los 'daemon threads' son hilos en segundo plano que se terminan automáticamente cuando finaliza el hilo principal."
    },
    {
        "question": "¿Cuál es el resultado de ejecutar el siguiente código en Python?\n\n```python\nimport threading\n\ndef imprimir():\n    print('Hola desde el hilo')\n\nhilo = threading.Thread(target=imprimir)\nhilo.start()\nhilo.join()\nprint('Fin del programa')\n```",
        "type": "multiple-choice",
        "options": [
            "Solo imprime 'Fin del programa'.",
            "Imprime 'Hola desde el hilo' y luego 'Fin del programa'.",
            "Imprime 'Fin del programa' y luego 'Hola desde el hilo'.",
            "Genera un error de ejecución."
        ],
        "answer": 1,
        "explanation": "El método 'join()' hace que el programa espere a que el hilo termine antes de continuar."
    },
    {
        "question": "Completa: Para establecer un servidor que escuche en todas las interfaces de red disponibles, se utiliza la dirección IP `__________`.",
        "type": "fill-in-the-blank",
        "answer": "0.0.0.0",
        "explanation": "`0.0.0.0` indica que el servidor debe escuchar en todas las interfaces disponibles."
    },
    {
        "question": "¿Qué hace el método `socket.accept()`?",
        "type": "multiple-choice",
        "options": [
            "Acepta una conexión entrante y devuelve una nueva conexión socket.",
            "Cierra una conexión existente.",
            "Envía datos a través del socket.",
            "Pone el socket en modo de escucha."
        ],
        "answer": 0,
        "explanation": "`accept()` espera una conexión entrante y devuelve un nuevo socket para esa conexión."
    },
    {
        "question": "En Python, ¿cómo se define un hilo como 'daemon'?",
        "type": "multiple-choice",
        "options": [
            "Estableciendo el atributo `daemon` a `True` antes de llamar a `start()`.",
            "Llamando al método `setDaemon(True)` después de `start()`.",
            "No es posible definir hilos 'daemon' en Python.",
            "Pasando `daemon=True` al crear el objeto Thread."
        ],
        "answer": 0,
        "explanation": "El atributo `daemon` debe establecerse en `True` antes de iniciar el hilo con `start()`."
    },
    {
        "question": "¿Cuál es el propósito del método `threading.current_thread()`?",
        "type": "multiple-choice",
        "options": [
            "Detener el hilo actual.",
            "Obtener un objeto que representa al hilo actual.",
            "Crear un nuevo hilo.",
            "Cambiar el nombre del hilo actual."
        ],
        "answer": 1,
        "explanation": "`current_thread()` devuelve una referencia al objeto Thread correspondiente al hilo que llama."
    },
    {
        "question": "En el contexto de programación concurrente, ¿qué es un 'mutex'?",
        "type": "multiple-choice",
        "options": [
            "Un tipo de excepción.",
            "Un mecanismo que asegura que solo un hilo acceda a un recurso a la vez.",
            "Un proceso que se ejecuta en segundo plano.",
            "Un tipo de hilo especial."
        ],
        "answer": 1,
        "explanation": "Un 'mutex' (mutual exclusion) es un mecanismo para prevenir acceso simultáneo a un recurso compartido."
    },
    {
        "question": "Completa el código para crear una clase de hilo personalizado:\n\n```python\nimport threading\n\nclass MiHilo(threading.Thread):\n    def __init__(self):\n        super().__init__()\n\n    def run(self):\n        __________\n```",
        "type": "fill-in-the-blank",
        "answer": "pass  # Código del hilo",
        "explanation": "Se debe implementar el método `run()` donde se define el comportamiento del hilo."
    },
    {
        "question": "¿Qué hace el siguiente código?\n\n```python\nimport threading\n\nlock = threading.Lock()\n\nwith lock:\n    # Operaciones seguras\n    pass\n```",
        "type": "multiple-choice",
        "options": [
            "Adquiere el lock y nunca lo libera.",
            "Adquiere el lock y lo libera automáticamente al salir del bloque 'with'.",
            "Genera un error porque 'lock' no se puede usar con 'with'.",
            "No hace nada."
        ],
        "answer": 1,
        "explanation": "El uso de 'with' asegura que el lock se libere automáticamente al salir del bloque."
    },
    {
        "question": "En programación de sockets, ¿qué protocolo utiliza `socket.SOCK_DGRAM`?",
        "type": "multiple-choice",
        "options": [
            "TCP",
            "UDP",
            "ICMP",
            "HTTP"
        ],
        "answer": 1,
        "explanation": "`SOCK_DGRAM` indica el uso del protocolo UDP."
    },
    {
        "question": "¿Cuál es la salida del siguiente código?\n\n```python\nimport threading\n\ncontador = 0\n\ndef incrementar():\n    global contador\n    for _ in range(1000):\n        contador += 1\n\nhilos = []\nfor _ in range(10):\n    hilo = threading.Thread(target=incrementar)\n    hilos.append(hilo)\n    hilo.start()\n\nfor hilo in hilos:\n    hilo.join()\n\nprint(contador)\n```",
        "type": "multiple-choice",
        "options": [
            "10000",
            "Un número menor que 10000 debido a condiciones de carrera.",
            "0",
            "Genera un error."
        ],
        "answer": 1,
        "explanation": "Sin protección de locks, las condiciones de carrera pueden causar resultados inconsistentes."
    },
    {
        "question": "Completa: En Python, el método `__________` del objeto Thread se utiliza para verificar si un hilo está vivo.",
        "type": "fill-in-the-blank",
        "answer": "is_alive()",
        "explanation": "`is_alive()` devuelve `True` si el hilo está activo."
    },
    {
        "question": "¿Qué módulo en Python proporciona funciones para trabajar con tiempo y retrasos?",
        "type": "multiple-choice",
        "options": [
            "datetime",
            "time",
            "threading",
            "sched"
        ],
        "answer": 1,
        "explanation": "El módulo 'time' incluye funciones para trabajar con el tiempo, como 'sleep()'."
    },
    {
        "question": "En el contexto de programación de procesos, ¿qué es un 'PID'?",
        "type": "multiple-choice",
        "options": [
            "Process Identifier",
            "Protocol Internet Datagram",
            "Programming Interface Descriptor",
            "Process Interaction Data"
        ],
        "answer": 0,
        "explanation": "'PID' significa 'Process Identifier', un número único asignado a cada proceso."
    },
    {
        "question": "¿Cuál es el propósito del método `join()` en el módulo `multiprocessing`?",
        "type": "multiple-choice",
        "options": [
            "Iniciar un nuevo proceso.",
            "Unir dos procesos en uno solo.",
            "Esperar a que un proceso hijo termine.",
            "Terminar un proceso."
        ],
        "answer": 2,
        "explanation": "`join()` hace que el proceso padre espere a que el proceso hijo termine."
    },
    {
        "question": "Completa el código para manejar una excepción al intentar abrir un archivo inexistente:\n\n```python\ntry:\n    with open('archivo.txt', 'r') as f:\n        contenido = f.read()\nexcept __________ as e:\n    print('Error:', e)\n```",
        "type": "fill-in-the-blank",
        "answer": "FileNotFoundError",
        "explanation": "La excepción `FileNotFoundError` se lanza cuando un archivo no existe."
    },
    {
        "question": "¿Qué método se utiliza para enviar datos a través de un socket en Python?",
        "type": "multiple-choice",
        "options": [
            "`send()`",
            "`receive()`",
            "`connect()`",
            "`bind()`"
        ],
        "answer": 0,
        "explanation": "`send()` envía datos a través del socket."
    },
    {
        "question": "En el módulo `subprocess`, ¿qué hace el argumento `shell=True`?",
        "type": "multiple-choice",
        "options": [
            "Ejecuta el comando a través del intérprete de comandos del sistema.",
            "Evita el uso del intérprete de comandos.",
            "Especifica que el comando es una lista.",
            "No tiene ningún efecto."
        ],
        "answer": 0,
        "explanation": "`shell=True` ejecuta el comando a través del shell del sistema operativo."
    },
    {
        "question": "Completa: Para crear un socket no bloqueante en Python, se utiliza el método `socket.setblocking(__________)`.",
        "type": "fill-in-the-blank",
        "answer": "False",
        "explanation": "Al establecer `setblocking(False)`, el socket no esperará indefinidamente."
    },
    {
        "question": "¿Qué es un 'context manager' en Python?",
        "type": "multiple-choice",
        "options": [
            "Una función que devuelve un objeto.",
            "Una estructura que permite la asignación condicional.",
            "Una forma de manejar recursos asegurando su correcta finalización.",
            "Una clase que gestiona variables globales."
        ],
        "answer": 2,
        "explanation": "Los 'context managers' permiten configurar y limpiar recursos automáticamente."
    },
    {
        "question": "En programación de hilos, ¿qué es un 'thread pool'?",
        "type": "multiple-choice",
        "options": [
            "Un conjunto de hilos preiniciados listos para ejecutar tareas.",
            "Un tipo de excepción de hilos.",
            "Un método para pausar hilos.",
            "Una cola de mensajes entre hilos."
        ],
        "answer": 0,
        "explanation": "Un 'thread pool' es un grupo de hilos que pueden reutilizarse para ejecutar tareas."
    },
    {
        "question": "¿Cuál es el propósito de `asyncio` en Python?",
        "type": "multiple-choice",
        "options": [
            "Proporcionar soporte para programación sincrónica.",
            "Manejar operaciones de E/S asíncronas.",
            "Crear interfaces gráficas de usuario.",
            "Mejorar el rendimiento de cálculos matemáticos."
        ],
        "answer": 1,
        "explanation": "`asyncio` es un módulo para escribir código concurrente usando corutinas y E/S asíncrona."
    },
    {
        "question": "Completa el código para leer una línea de entrada del usuario:\n\n```python\nentrada = __________('Introduce un valor: ')\n```",
        "type": "fill-in-the-blank",
        "answer": "input",
        "explanation": "`input()` lee una línea de entrada desde el usuario."
    },
    {
        "question": "En el contexto de programación de sockets, ¿qué es un 'puerto'?",
        "type": "multiple-choice",
        "options": [
            "Una dirección IP.",
            "Un identificador numérico para distinguir aplicaciones o servicios.",
            "Una interfaz de red física.",
            "Un protocolo de red."
        ],
        "answer": 1,
        "explanation": "Un puerto es un número que identifica un servicio específico en un host."
    },
    {
        "question": "¿Qué hace el método `socket.connect()`?",
        "type": "multiple-choice",
        "options": [
            "Inicia una conexión hacia un servidor.",
            "Espera conexiones entrantes.",
            "Cierra la conexión existente.",
            "Envía datos a través del socket."
        ],
        "answer": 0,
        "explanation": "`connect()` establece una conexión con un socket remoto."
    },
    {
        "question": "En Python, ¿qué es el 'GIL'?",
        "type": "multiple-choice",
        "options": [
            "Global Interpreter Lock",
            "Graphical Interface Library",
            "Generic Input Layer",
            "Global Initialization List"
        ],
        "answer": 0,
        "explanation": "El 'GIL' es un mecanismo que permite que solo un hilo ejecute código bytecode de Python a la vez."
    },
    {
        "question": "Completa: Para pausar la ejecución de un programa por 5 segundos, se utiliza `time.__________(5)`.",
        "type": "fill-in-the-blank",
        "answer": "sleep",
        "explanation": "`time.sleep(5)` detiene la ejecución durante 5 segundos."
    },
    {
        "question": "¿Qué hace el método `os.kill()` en Python?",
        "type": "multiple-choice",
        "options": [
            "Termina un proceso especificado por su PID.",
            "Inicia un nuevo proceso.",
            "Suspende temporalmente un proceso.",
            "No es un método válido en Python."
        ],
        "answer": 0,
        "explanation": "`os.kill(pid, señal)` envía una señal al proceso especificado, permitiendo terminarlo."
    },
    {
        "question": "En programación concurrente, ¿qué es una 'barrera'?",
        "type": "multiple-choice",
        "options": [
            "Un mecanismo para prevenir condiciones de carrera.",
            "Un punto donde los hilos deben esperar hasta que todos lleguen antes de continuar.",
            "Una excepción lanzada al detectar un deadlock.",
            "Un método para acelerar la ejecución de hilos."
        ],
        "answer": 1,
        "explanation": "Una barrera sincroniza hilos haciendo que esperen hasta que todos alcancen un punto común."
    },
    {
        "question": "Completa el código para crear un socket UDP cliente:\n\n```python\nimport socket\n\ns = socket.socket(socket.AF_INET, socket.__________)\n```",
        "type": "fill-in-the-blank",
        "answer": "SOCK_DGRAM",
        "explanation": "`SOCK_DGRAM` indica que se trata de un socket UDP."
    },
    {
        "question": "¿Qué hace el siguiente código?\n\n```python\nimport threading\n\ncond = threading.Condition()\n\nwith cond:\n    cond.notify_all()\n```",
        "type": "multiple-choice",
        "options": [
            "Notifica a todos los hilos esperando en la condición.",
            "Espera a que todos los hilos notifiquen la condición.",
            "Genera un error porque no hay hilos esperando.",
            "Cierra todos los hilos."
        ],
        "answer": 0,
        "explanation": "`notify_all()` despierta a todos los hilos que están esperando en la condición."
    },
    {
        "question": "En el módulo `multiprocessing`, ¿qué es un 'Pool'?",
        "type": "multiple-choice",
        "options": [
            "Un conjunto de hilos.",
            "Un conjunto de procesos trabajadores para ejecutar tareas en paralelo.",
            "Una cola de tareas.",
            "Un mecanismo de comunicación entre procesos."
        ],
        "answer": 1,
        "explanation": "Un 'Pool' en `multiprocessing` permite distribuir tareas entre múltiples procesos."
    },
    {
        "question": "Completa: Para establecer una variable de entorno en Python, se utiliza `os.environ['NOMBRE'] = 'valor'`. Para obtener su valor, se utiliza `os.environ.__________('NOMBRE')`.",
        "type": "fill-in-the-blank",
        "answer": "get",
        "explanation": "`os.environ.get('NOMBRE')` obtiene el valor de la variable de entorno."
    },
    {
        "question": "¿Qué es un 'evento' en programación de hilos?",
        "type": "multiple-choice",
        "options": [
            "Un tipo de excepción.",
            "Un mecanismo para comunicar el estado entre hilos.",
            "Un método para acelerar hilos.",
            "Una función que detiene todos los hilos."
        ],
        "answer": 1,
        "explanation": "Un 'evento' permite a los hilos esperar hasta que otro hilo señale que algo ha ocurrido."
    },
    {
        "question": "En programación de sockets, ¿qué método se utiliza para enviar datos a un destino específico en un socket UDP?",
        "type": "multiple-choice",
        "options": [
            "`sendto()`",
            "`send()`",
            "`write()`",
            "`connect()`"
        ],
        "answer": 0,
        "explanation": "`sendto()` envía datos a una dirección específica en sockets UDP."
    },
    {
        "question": "Completa el código para manejar una excepción general en Python:\n\n```python\ntry:\n    # Código que puede generar una excepción\n    pass\nexcept __________ as e:\n    print('Ocurrió un error:', e)\n```",
        "type": "fill-in-the-blank",
        "answer": "Exception",
        "explanation": "`Exception` es la clase base para todas las excepciones integradas no graves."
    },
    {
        "question": "¿Qué hace el método `threading.Timer()`?",
        "type": "multiple-choice",
        "options": [
            "Inicia un hilo después de un intervalo de tiempo especificado.",
            "Mide el tiempo de ejecución de un hilo.",
            "Termina un hilo después de un tiempo determinado.",
            "No es un método válido en el módulo threading."
        ],
        "answer": 0,
        "explanation": "`Timer()` crea un hilo que se ejecuta después de un retraso especificado."
    },
    {
        "question": "En el contexto de procesos, ¿qué es un 'zombie process'?",
        "type": "multiple-choice",
        "options": [
            "Un proceso que nunca se inició.",
            "Un proceso que ha terminado pero aún tiene una entrada en la tabla de procesos.",
            "Un proceso que consume todos los recursos del sistema.",
            "Un proceso que está esperando a ser planificado."
        ],
        "answer": 1,
        "explanation": "Un 'zombie process' es aquel que ha finalizado pero aún no ha sido limpiado por su proceso padre."
    },
    {
        "question": "Completa: En Python, para obtener el número de hilos activos, se utiliza `threading.__________()`.",
        "type": "fill-in-the-blank",
        "answer": "active_count",
        "explanation": "`active_count()` devuelve el número de hilos Thread activos."
    },
    {
        "question": "¿Cuál es el propósito del módulo `selectors` en Python?",
        "type": "multiple-choice",
        "options": [
            "Manejar operaciones de E/S de forma síncrona.",
            "Proporcionar una interfaz de alto nivel para I/O multiplexada.",
            "Crear interfaces gráficas de usuario.",
            "Gestionar hilos y procesos."
        ],
        "answer": 1,
        "explanation": "`selectors` permite esperar a que varios objetos de archivo estén listos para operaciones de E/S."
    },
    {
        "question": "En programación concurrente, ¿qué es una 'condición de variable'?",
        "type": "multiple-choice",
        "options": [
            "Una variable que cambia su valor en tiempo de ejecución.",
            "Un mecanismo de sincronización que permite a los hilos esperar hasta que se cumpla una condición específica.",
            "Un error en el código de los hilos.",
            "Una función para detener todos los hilos."
        ],
        "answer": 1,
        "explanation": "Una 'condición de variable' permite que los hilos esperen y notifiquen sobre ciertas condiciones."
    },
    {
        "question": "Completa el código para ejecutar un comando del sistema y capturar su salida:\n\n```python\nimport subprocess\n\nresultado = subprocess.run(['ls', '-l'], stdout=subprocess.PIPE)\nsalida = resultado.__________\n```",
        "type": "fill-in-the-blank",
        "answer": "stdout",
        "explanation": "`stdout` contiene la salida estándar del comando ejecutado."
    },
    {
        "question": "¿Qué hace el método `queue.Queue().get()` en el módulo `queue`?",
        "type": "multiple-choice",
        "options": [
            "Inserta un elemento en la cola.",
            "Elimina y devuelve un elemento de la cola.",
            "Devuelve el tamaño de la cola.",
            "Cierra la cola."
        ],
        "answer": 1,
        "explanation": "`get()` elimina y devuelve un elemento de la cola, bloqueando si es necesario hasta que haya uno disponible."
    },
    {
        "question": "En programación de sockets, ¿qué es el 'loopback address'?",
        "type": "multiple-choice",
        "options": [
            "Una dirección IP reservada para uso interno del host.",
            "La dirección IP de difusión.",
            "La dirección IP de la red local.",
            "Una dirección IP pública."
        ],
        "answer": 0,
        "explanation": "La dirección '127.0.0.1' es la dirección de loopback, utilizada para comunicaciones dentro del mismo host."
    },
    {
        "question": "Completa: Para crear un objeto de evento en el módulo `multiprocessing`, se utiliza `multiprocessing.__________()`.",
        "type": "fill-in-the-blank",
        "answer": "Event",
        "explanation": "`Event()` crea un objeto evento para sincronizar procesos."
    },
    {
        "question": "¿Qué es un 'file descriptor' en programación de sistemas?",
        "type": "multiple-choice",
        "options": [
            "Un puntero a un archivo en el sistema de archivos.",
            "Un número entero que identifica un archivo abierto por un proceso.",
            "Una descripción textual de un archivo.",
            "Una estructura de datos que contiene el contenido del archivo."
        ],
        "answer": 1,
        "explanation": "Un 'file descriptor' es un identificador (número entero) asociado a un archivo abierto."
    }
]
