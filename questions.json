[
    {
        "question": "¿Qué módulo en Python se utiliza para crear y gestionar subprocesos?",
        "type": "multiple-choice",
        "options": [
            "os",
            "sys",
            "subprocess",
            "threading"
        ],
        "answer": 3,
        "explanation": "El módulo `threading` se utiliza para crear y gestionar subprocesos (hilos) en Python."
    },
    {
        "question": "Rellena el espacio en blanco: Para ejecutar un comando externo y capturar su salida en Python, se utiliza la función `______` del módulo `subprocess`.",
        "type": "fill-in-the-blank",
        "answer": "run",
        "explanation": "La función `subprocess.run` se utiliza para ejecutar comandos externos y capturar su salida."
    },
    {
        "question": "Crea un programa en Python que ejecute un comando externo y capture tanto la salida estándar como el código de retorno utilizando el módulo `subprocess`.",
        "type": "code",
        "answer": "import subprocess\n\nprocess = subprocess.run(['echo', 'Hola Mundo'], capture_output=True, text=True)\nprint(process.stdout)\nprint(f'Código de retorno: {process.returncode}')",
        "validation": ["import subprocess", "subprocess.run", "process.stdout", "process.returncode"],
        "explanation": "El programa ejecuta `echo Hola Mundo` y muestra la salida y el código de retorno del proceso."
    },
    {
        "question": "¿Cuál es el propósito del módulo `psutil` en Python?",
        "type": "multiple-choice",
        "options": [
            "Gestionar procesos y obtener información del sistema",
            "Crear interfaces gráficas",
            "Realizar solicitudes HTTP",
            "Procesar datos en formatos JSON"
        ],
        "answer": 0,
        "explanation": "El módulo `psutil` se utiliza para gestionar procesos y obtener información detallada del sistema."
    },
    {
        "question": "Rellena el espacio en blanco: En el módulo `threading` de Python, la clase utilizada para crear hilos es `______`.",
        "type": "fill-in-the-blank",
        "answer": "Thread",
        "explanation": "La clase `Thread` del módulo `threading` se utiliza para crear y gestionar hilos."
    },
    {
        "question": "Crea un programa en Python que inicie dos hilos: uno que imprima 'Ping' cada segundo y otro que imprima 'Pong' cada segundo.",
        "type": "code",
        "answer": "import threading\nimport time\n\ndef ping():\n    while True:\n        print('Ping')\n        time.sleep(1)\n\ndef pong():\n    while True:\n        print('Pong')\n        time.sleep(1)\n\nif __name__ == '__main__':\n    t1 = threading.Thread(target=ping)\n    t2 = threading.Thread(target=pong)\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()",
        "validation": ["import threading", "threading.Thread", "t1.start", "t2.start"],
        "explanation": "El programa crea dos hilos que ejecutan las funciones `ping` y `pong`, imprimiendo 'Ping' y 'Pong' cada segundo respectivamente."
    },
    {
        "question": "¿Qué método del objeto `Process` en el módulo `multiprocessing` se utiliza para iniciar la ejecución del proceso?",
        "type": "multiple-choice",
        "options": [
            "start",
            "run",
            "execute",
            "begin"
        ],
        "answer": 0,
        "explanation": "El método `start` se utiliza para iniciar la ejecución de un proceso en el módulo `multiprocessing`."
    },
    {
        "question": "Rellena el espacio en blanco: Para obtener el identificador de proceso (PID) de un proceso actual en Python, se utiliza `os.getpid()` del módulo `______`.",
        "type": "fill-in-the-blank",
        "answer": "os",
        "explanation": "La función `os.getpid()` del módulo `os` se utiliza para obtener el PID del proceso actual."
    },
    {
        "question": "Crea un programa en Python que liste todos los procesos activos en el sistema utilizando el módulo `psutil`.",
        "type": "code",
        "answer": "import psutil\n\nfor proc in psutil.process_iter(['pid', 'name']):\n    try:\n        print(f'PID: {proc.info[\"pid\"]}, Nombre: {proc.info[\"name\"]}')\n    except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):\n        pass",
        "validation": ["import psutil", "psutil.process_iter", "proc.info"],
        "explanation": "El programa itera sobre todos los procesos activos y imprime su PID y nombre utilizando el módulo `psutil`."
    },
    {
        "question": "¿Cuál es la función del método `subprocess.Popen()` en Python?",
        "type": "multiple-choice",
        "options": [
            "Iniciar un proceso y esperar a que termine",
            "Iniciar un proceso sin esperar a que termine",
            "Finalizar un proceso",
            "Listar todos los procesos"
        ],
        "answer": 1,
        "explanation": "El método `subprocess.Popen()` inicia un proceso y no espera a que termine, permitiendo la ejecución concurrente."
    },
    {
        "question": "¿Qué clase del módulo `multiprocessing` en Python permite compartir variables entre procesos utilizando un servidor?",
        "type": "multiple-choice",
        "options": [
            "Process",
            "Queue",
            "Manager",
            "Pipe"
        ],
        "answer": 2,
        "explanation": "La clase `Manager` permite compartir variables entre procesos utilizando un servidor."
    },
    {
        "question": "Rellena el espacio en blanco: En Python, para iniciar un hilo como daemon, se establece el atributo `______` a `True` antes de iniciar el hilo.",
        "type": "fill-in-the-blank",
        "answer": "daemon",
        "explanation": "El atributo `daemon` se establece a `True` para iniciar un hilo como daemon."
    },
    {
        "question": "Crea un programa en Python que inicie un hilo daemon que imprima 'Hilo daemon corriendo' cada segundo y termine cuando el hilo principal finalice.",
        "type": "code",
        "answer": "import threading\nimport time\n\ndef hilo_daemon():\n    while True:\n        print('Hilo daemon corriendo')\n        time.sleep(1)\n\nif __name__ == '__main__':\n    t = threading.Thread(target=hilo_daemon)\n    t.daemon = True\n    t.start()\n    \n    # Hilo principal espera 5 segundos\n    time.sleep(5)\n    print('Hilo principal finalizando')",
        "validation": ["import threading", "threading.Thread", "t.daemon = True", "t.start"],
        "explanation": "El programa crea un hilo daemon que imprime un mensaje cada segundo y finaliza automáticamente cuando el hilo principal termina."
    },
    {
        "question": "¿Qué método del objeto `Queue` en el módulo `queue` de Python se utiliza para esperar hasta que un elemento esté disponible para ser retirado de la cola?",
        "type": "multiple-choice",
        "options": [
            "get_nowait",
            "get",
            "remove",
            "fetch"
        ],
        "answer": 1,
        "explanation": "El método `get` bloquea hasta que un elemento esté disponible en la cola."
    },
    {
        "question": "Rellena el espacio en blanco: En Python, para crear una condición que permite a los hilos esperar y notificarse mutuamente, se utiliza la clase `______` del módulo `threading`.",
        "type": "fill-in-the-blank",
        "answer": "Condition",
        "explanation": "La clase `Condition` del módulo `threading` se utiliza para crear condiciones de espera y notificación entre hilos."
    },
    {
        "question": "Crea un programa en Python que utilice una condición (`Condition`) para sincronizar dos hilos: uno que espera a que una variable alcance cierto valor y otro que actualiza la variable.",
        "type": "code",
        "answer": "import threading\nimport time\n\ndef esperar(cond, shared_data):\n    with cond:\n        cond.wait_for(lambda: shared_data['valor'] >= 5)\n        print('Valor alcanzó 5 o más:', shared_data['valor'])\n\ndef actualizar(cond, shared_data):\n    with cond:\n        for i in range(6):\n            shared_data['valor'] += 1\n            print(f'Actualizando valor a {shared_data['valor']}')\n            time.sleep(1)\n        cond.notify_all()\n\ncond = threading.Condition()\nshared_data = {'valor': 0}\n\nt1 = threading.Thread(target=esperar, args=(cond, shared_data))\nt2 = threading.Thread(target=actualizar, args=(cond, shared_data))\n\nt1.start()\nt2.start()\n\nt1.join()\nt2.join()",
        "validation": ["import threading", "threading.Condition", "cond.wait_for", "cond.notify_all"],
        "explanation": "El programa sincroniza dos hilos utilizando una condición: uno espera a que `shared_data['valor']` alcance 5 y otro lo actualiza."
    },
    {
        "question": "¿Qué método del objeto `Thread` en Python se utiliza para esperar a que un hilo termine su ejecución?",
        "type": "multiple-choice",
        "options": [
            "wait",
            "join",
            "stop",
            "sleep"
        ],
        "answer": 1,
        "explanation": "El método `join` se utiliza para esperar a que un hilo termine su ejecución."
    },
    {
        "question": "Crea un programa en Python que utilice un semáforo (`Semaphore`) para limitar el número de hilos que pueden acceder a una sección crítica a 3.",
        "type": "code",
        "answer": "import threading\nimport time\nimport random\n\ndef tarea(semaforo, id):\n    with semaforo:\n        print(f'Hilo {id} entrando a la sección crítica')\n        time.sleep(random.uniform(1, 3))\n        print(f'Hilo {id} saliendo de la sección crítica')\n\nsemaforo = threading.Semaphore(3)\n\nhilos = []\nfor i in range(10):\n    t = threading.Thread(target=tarea, args=(semaforo, i))\n    hilos.append(t)\n    t.start()\n\nfor t in hilos:\n    t.join()",
        "validation": ["import threading", "threading.Semaphore", "with semaforo"],
        "explanation": "El programa utiliza un semáforo para limitar el acceso a una sección crítica a 3 hilos simultáneamente."
    },
    {
        "question": "¿Qué método del objeto `threading.Event` en Python se utiliza para establecer el evento, permitiendo que los hilos que están esperando continúen su ejecución?",
        "type": "multiple-choice",
        "options": [
            "set",
            "clear",
            "wait",
            "toggle"
        ],
        "answer": 0,
        "explanation": "El método `set` del objeto `threading.Event` establece el evento, permitiendo que los hilos que están esperando continúen."
    },
    {
        "question": "Rellena el espacio en blanco: En Python, para iniciar un temporizador que ejecute una función después de 5 segundos, se utiliza `threading.Timer(____, func).start()`.",
        "type": "fill-in-the-blank",
        "answer": "5",
        "explanation": "El primer argumento de `threading.Timer` es el tiempo en segundos antes de ejecutar la función. En este caso, 5."
    },
    {
        "question": "Crea un programa en Python que inicie un hilo que imprima 'Temporizador activado' después de 3 segundos utilizando `threading.Timer`.",
        "type": "code",
        "answer": "import threading\nimport time\n\ndef temporizador():\n    print('Temporizador activado')\n\nt = threading.Timer(3, temporizador)\nt.start()\n\n# Opcional: Esperar para asegurar que el programa no termine antes de que el temporizador se active\nt.join()",
        "validation": ["import threading", "threading.Timer", "t.start", "t.join"],
        "explanation": "El programa crea un temporizador que ejecuta la función `temporizador` después de 3 segundos."
    },
    {
        "question": "¿Qué clase del módulo `threading` en Python se utiliza para crear hilos que pueden ser detenidos desde el exterior?",
        "type": "multiple-choice",
        "options": [
            "Thread",
            "Timer",
            "Event",
            "None de las anteriores"
        ],
        "answer": 3,
        "explanation": "Ninguna de las clases mencionadas permite detener un hilo desde el exterior de forma segura. En Python, los hilos deben gestionarse de manera cooperativa para detenerse."
    },
    {
        "question": "Rellena el espacio en blanco: En Python, la clase `Lock` del módulo `threading` se utiliza para asegurar que solo un hilo pueda ejecutar una sección crítica a la vez. El método para adquirir el bloqueo es `____()`.",
        "type": "fill-in-the-blank",
        "answer": "acquire",
        "explanation": "El método `acquire()` se utiliza para adquirir el bloqueo en una instancia de `Lock`."
    },
    {
        "question": "Crea un programa en Python que utilice un bloqueo (`Lock`) para proteger una variable compartida entre múltiples hilos que la incrementan.",
        "type": "code",
        "answer": "import threading\n\ncontador = 0\nlock = threading.Lock()\n\ndef incrementar():\n    global contador\n    for _ in range(100000):\n        with lock:\n            contador += 1\n\nhilos = [threading.Thread(target=incrementar) for _ in range(10)]\n\nfor t in hilos:\n    t.start()\n\nfor t in hilos:\n    t.join()\n\nprint(f'Valor final del contador: {contador}')",
        "validation": ["import threading", "threading.Lock", "with lock:", "t.start", "t.join"],
        "explanation": "El programa utiliza un bloqueo para asegurar que solo un hilo a la vez pueda incrementar la variable `contador`, evitando condiciones de carrera."
    },
    {
        "question": "Rellena el espacio en blanco: En Python, para crear una barrera (`Barrier`) que sincronice a 5 hilos, se utiliza `threading.Barrier(_____)`.",
        "type": "fill-in-the-blank",
        "answer": "5",
        "explanation": "Se utiliza `threading.Barrier(5)` para crear una barrera que sincroniza a 5 hilos."
    },
    {
        "question": "Crea un programa en Python que inicie 5 hilos que esperen en una barrera y, una vez que todos lleguen, impriman 'Todos los hilos han llegado a la barrera'.",
        "type": "code",
        "answer": "import threading\nimport time\nimport random\n\ndef tarea(barrier, id):\n    time.sleep(random.uniform(0.1, 2.0))\n    print(f'Hilo {id} llegó a la barrera')\n    barrier.wait()\n    print(f'Todos los hilos han llegado a la barrera. Hilo {id} continúa')\n\nif __name__ == '__main__':\n    barrier = threading.Barrier(5)\n    hilos = [threading.Thread(target=tarea, args=(barrier, i)) for i in range(1, 6)]\n    for t in hilos:\n        t.start()\n    for t in hilos:\n        t.join()",
        "validation": ["import threading", "threading.Barrier", "barrier.wait"],
        "explanation": "El programa crea 5 hilos que esperan en una barrera y continúan una vez que todos han llegado, imprimiendo mensajes antes y después de la sincronización."
    },
    {
        "question": "¿Qué método del objeto `Semaphore` en Python se utiliza para liberar un permiso, incrementando el contador del semáforo?",
        "type": "multiple-choice",
        "options": [
            "acquire",
            "release",
            "wait",
            "notify"
        ],
        "answer": 1,
        "explanation": "El método `release` se utiliza para liberar un permiso en un semáforo, incrementando su contador."
    },
    {
        "question": "Rellena el espacio en blanco: En Python, para detener un hilo que está esperando en una condición (`Condition`), se puede utilizar el método `____` para notificar a todos los hilos que esperaban.",
        "type": "fill-in-the-blank",
        "answer": "notify_all",
        "explanation": "El método `notify_all` se utiliza para notificar a todos los hilos que están esperando en una condición."
    },
    {
        "question": "Crea un programa en Python que utilice una condición (`Condition`) para que un hilo espere hasta que otro hilo cambie el valor de una variable compartida.",
        "type": "code",
        "answer": "import threading\nimport time\n\ndef esperar(cond, data):\n    with cond:\n        cond.wait()\n        print(f'Variable actualizada: {data['valor']}')\n\ndef actualizar(cond, data):\n    with cond:\n        time.sleep(2)\n        data['valor'] = 10\n        print('Variable actualizada por el hilo de actualización')\n        cond.notify()\n\ncond = threading.Condition()\ndata = {'valor': 0}\n\nt1 = threading.Thread(target=esperar, args=(cond, data))\nt2 = threading.Thread(target=actualizar, args=(cond, data))\n\nt1.start()\nt2.start()\n\nt1.join()\nt2.join()",
        "validation": ["import threading", "threading.Condition", "cond.wait", "cond.notify"],
        "explanation": "El programa sincroniza dos hilos utilizando una condición: uno espera a que la variable `data['valor']` sea actualizada por otro hilo."
    },
    {
        "question": "¿Qué método del objeto `threading.Event` en Python se utiliza para bloquear hasta que el evento sea establecido?",
        "type": "multiple-choice",
        "options": [
            "set",
            "clear",
            "wait",
            "toggle"
        ],
        "answer": 2,
        "explanation": "El método `wait` bloquea el hilo hasta que el evento sea establecido mediante `set`."
    },
    {
        "question": "Crea un programa en Python que inicie un hilo que imprima 'Temporizador activado' después de 3 segundos utilizando `threading.Timer`.",
        "type": "code",
        "answer": "import threading\nimport time\n\ndef temporizador():\n    print('Temporizador activado')\n\nt = threading.Timer(3, temporizador)\nt.start()\n\n# Opcional: Esperar para asegurar que el programa no termine antes de que el temporizador se active\nt.join()",
        "validation": ["import threading", "threading.Timer", "t.start", "t.join"],
        "explanation": "El programa crea un temporizador que ejecuta la función `temporizador` después de 3 segundos."
    },
    {
        "question": "¿Qué clase del módulo `threading` en Python se utiliza para crear hilos que pueden ser detenidos desde el exterior?",
        "type": "multiple-choice",
        "options": [
            "Thread",
            "Timer",
            "Event",
            "None de las anteriores"
        ],
        "answer": 3,
        "explanation": "Ninguna de las clases mencionadas permite detener un hilo desde el exterior de forma segura. En Python, los hilos deben gestionarse de manera cooperativa para detenerse."
    },
    {
        "question": "Rellena el espacio en blanco: En Python, la clase `Lock` del módulo `threading` se utiliza para asegurar que solo un hilo pueda ejecutar una sección crítica a la vez. El método para adquirir el bloqueo es `____()`.",
        "type": "fill-in-the-blank",
        "answer": "acquire",
        "explanation": "El método `acquire()` se utiliza para adquirir el bloqueo en una instancia de `Lock`."
    },
    {
        "question": "Crea un programa en Python que utilice un bloqueo (`Lock`) para proteger una variable compartida entre múltiples hilos que la incrementan.",
        "type": "code",
        "answer": "import threading\n\ncontador = 0\nlock = threading.Lock()\n\ndef incrementar():\n    global contador\n    for _ in range(100000):\n        with lock:\n            contador += 1\n\nhilos = [threading.Thread(target=incrementar) for _ in range(10)]\n\nfor t in hilos:\n    t.start()\n\nfor t in hilos:\n    t.join()\n\nprint(f'Valor final del contador: {contador}')",
        "validation": ["import threading", "threading.Lock", "with lock:", "t.start", "t.join"],
        "explanation": "El programa utiliza un bloqueo para asegurar que solo un hilo a la vez pueda incrementar la variable `contador`, evitando condiciones de carrera."
    },
    {
        "question": "Rellena el espacio en blanco: En Python, para crear una barrera (`Barrier`) que sincronice a 5 hilos, se utiliza `threading.Barrier(_____)`.",
        "type": "fill-in-the-blank",
        "answer": "5",
        "explanation": "Se utiliza `threading.Barrier(5)` para crear una barrera que sincroniza a 5 hilos."
    },
    {
        "question": "Crea un programa en Python que inicie 5 hilos que esperen en una barrera y, una vez que todos lleguen, impriman 'Todos los hilos han llegado a la barrera'.",
        "type": "code",
        "answer": "import threading\nimport time\nimport random\n\ndef tarea(barrier, id):\n    time.sleep(random.uniform(0.1, 2.0))\n    print(f'Hilo {id} llegó a la barrera')\n    barrier.wait()\n    print(f'Todos los hilos han llegado a la barrera. Hilo {id} continúa')\n\nif __name__ == '__main__':\n    barrier = threading.Barrier(5)\n    hilos = [threading.Thread(target=tarea, args=(barrier, i)) for i in range(1, 6)]\n    for t in hilos:\n        t.start()\n    for t in hilos:\n        t.join()",
        "validation": ["import threading", "threading.Barrier", "barrier.wait"],
        "explanation": "El programa crea 5 hilos que esperan en una barrera y continúan una vez que todos han llegado, imprimiendo mensajes antes y después de la sincronización."
    },
    {
        "question": "¿Qué método del objeto `Semaphore` en Python se utiliza para liberar un permiso, incrementando el contador del semáforo?",
        "type": "multiple-choice",
        "options": [
            "acquire",
            "release",
            "wait",
            "notify"
        ],
        "answer": 1,
        "explanation": "El método `release` se utiliza para liberar un permiso en un semáforo, incrementando su contador."
    },
    {
        "question": "Rellena el espacio en blanco: En Python, para detener un hilo que está esperando en una condición (`Condition`), se puede utilizar el método `____` para notificar a todos los hilos que esperaban.",
        "type": "fill-in-the-blank",
        "answer": "notify_all",
        "explanation": "El método `notify_all` se utiliza para notificar a todos los hilos que están esperando en una condición."
    },
    {
        "question": "Crea un programa en Python que utilice una condición (`Condition`) para que un hilo espere hasta que otro hilo cambie el valor de una variable compartida.",
        "type": "code",
        "answer": "import threading\nimport time\n\ndef esperar(cond, data):\n    with cond:\n        cond.wait()\n        print(f'Variable actualizada: {data['valor']}')\n\ndef actualizar(cond, data):\n    with cond:\n        time.sleep(2)\n        data['valor'] = 10\n        print('Variable actualizada por el hilo de actualización')\n        cond.notify()\n\ncond = threading.Condition()\ndata = {'valor': 0}\n\nt1 = threading.Thread(target=esperar, args=(cond, data))\nt2 = threading.Thread(target=actualizar, args=(cond, data))\n\nt1.start()\nt2.start()\n\nt1.join()\nt2.join()",
        "validation": ["import threading", "threading.Condition", "cond.wait", "cond.notify"],
        "explanation": "El programa sincroniza dos hilos utilizando una condición: uno espera a que la variable `data['valor']` sea actualizada por otro hilo."
    },
    {
        "question": "¿Qué método del objeto `threading.Event` en Python se utiliza para bloquear hasta que el evento sea establecido?",
        "type": "multiple-choice",
        "options": [
            "set",
            "clear",
            "wait",
            "toggle"
        ],
        "answer": 2,
        "explanation": "El método `wait` bloquea el hilo hasta que el evento sea establecido mediante `set`."
    },
    {
        "question": "¿Qué método del objeto `threading.Event` en Python se utiliza para establecer el evento, permitiendo que los hilos que están esperando continúen su ejecución?",
        "type": "multiple-choice",
        "options": [
            "set",
            "clear",
            "wait",
            "toggle"
        ],
        "answer": 0,
        "explanation": "El método `set` del objeto `threading.Event` establece el evento, permitiendo que los hilos que están esperando continúen."
    },
    {
        "question": "Rellena el espacio en blanco: En Python, para crear una condición que permite a los hilos esperar y notificarse mutuamente, se utiliza la clase `______` del módulo `threading`.",
        "type": "fill-in-the-blank",
        "answer": "Condition",
        "explanation": "La clase `Condition` del módulo `threading` se utiliza para crear condiciones de espera y notificación entre hilos."
    },
    {
        "question": "¿Cuál es la función del método `process_iter` en el módulo `psutil` en Python?",
        "type": "multiple-choice",
        "options": [
            "Iterar sobre las interfaces de red",
            "Iterar sobre los procesos activos",
            "Iterar sobre los archivos abiertos",
            "Iterar sobre las conexiones de red"
        ],
        "answer": 1,
        "explanation": "El método `process_iter` se utiliza para iterar sobre todos los procesos activos en el sistema."
    },
    {
        "question": "Crea un programa en Python que implemente un productor-consumidor utilizando una cola (`Queue`) donde el productor añade números del 1 al 10 y el consumidor los imprime.",
        "type": "code",
        "answer": "import threading\nimport queue\nimport time\n\ndef productor(q):\n    for i in range(1, 11):\n        q.put(i)\n        print(f'Productor añadió: {i}')\n        time.sleep(0.5)\n    q.put(None)  # Señal para el consumidor\n\ndef consumidor(q):\n    while True:\n        item = q.get()\n        if item is None:\n            break\n        print(f'Consumidor procesó: {item}')\n        q.task_done()\n\nq = queue.Queue()\n\nt_prod = threading.Thread(target=productor, args=(q,))\nt_cons = threading.Thread(target=consumidor, args=(q,))\n\nt_prod.start()\nt_cons.start()\n\nt_prod.join()\nq.join()\n",
        "validation": ["import queue", "threading.Thread", "q.put", "q.get"],
        "explanation": "El programa implementa un productor que añade números a una cola y un consumidor que los procesa, utilizando hilos para la concurrencia."
    },
    {
        "question": "Rellena el espacio en blanco: En Python, para crear una barrera (`Barrier`) que sincronice a 5 hilos, se utiliza `threading.Barrier(_____)`.",
        "type": "fill-in-the-blank",
        "answer": "5",
        "explanation": "Se utiliza `threading.Barrier(5)` para crear una barrera que sincroniza a 5 hilos."
    },
    {
        "question": "Crea un programa en Python que inicie 5 hilos que esperen en una barrera y, una vez que todos lleguen, impriman 'Todos los hilos han llegado a la barrera'.",
        "type": "code",
        "answer": "import threading\nimport time\nimport random\n\ndef tarea(barrier, id):\n    time.sleep(random.uniform(0.1, 2.0))\n    print(f'Hilo {id} llegó a la barrera')\n    barrier.wait()\n    print(f'Todos los hilos han llegado a la barrera. Hilo {id} continúa')\n\nif __name__ == '__main__':\n    barrier = threading.Barrier(5)\n    hilos = [threading.Thread(target=tarea, args=(barrier, i)) for i in range(1, 6)]\n    for t in hilos:\n        t.start()\n    for t in hilos:\n        t.join()",
        "validation": ["import threading", "threading.Barrier", "barrier.wait"],
        "explanation": "El programa crea 5 hilos que esperan en una barrera y continúan una vez que todos han llegado, imprimiendo mensajes antes y después de la sincronización."
    },
    {
        "question": "¿Qué método del objeto `Semaphore` en Python se utiliza para liberar un permiso, incrementando el contador del semáforo?",
        "type": "multiple-choice",
        "options": [
            "acquire",
            "release",
            "wait",
            "notify"
        ],
        "answer": 1,
        "explanation": "El método `release` se utiliza para liberar un permiso en un semáforo, incrementando su contador."
    },
    {
        "question": "Rellena el espacio en blanco: En Python, para detener un hilo que está esperando en una condición (`Condition`), se puede utilizar el método `____` para notificar a todos los hilos que esperaban.",
        "type": "fill-in-the-blank",
        "answer": "notify_all",
        "explanation": "El método `notify_all` se utiliza para notificar a todos los hilos que están esperando en una condición."
    },
    {
        "question": "Crea un programa en Python que utilice una condición (`Condition`) para que un hilo espere hasta que otro hilo cambie el valor de una variable compartida.",
        "type": "code",
        "answer": "import threading\nimport time\n\ndef esperar(cond, data):\n    with cond:\n        cond.wait()\n        print(f'Variable actualizada: {data['valor']}')\n\ndef actualizar(cond, data):\n    with cond:\n        time.sleep(2)\n        data['valor'] = 10\n        print('Variable actualizada por el hilo de actualización')\n        cond.notify()\n\ncond = threading.Condition()\ndata = {'valor': 0}\n\nt1 = threading.Thread(target=esperar, args=(cond, data))\nt2 = threading.Thread(target=actualizar, args=(cond, data))\n\nt1.start()\nt2.start()\n\nt1.join()\nt2.join()",
        "validation": ["import threading", "threading.Condition", "cond.wait", "cond.notify"],
        "explanation": "El programa sincroniza dos hilos utilizando una condición: uno espera a que la variable `data['valor']` sea actualizada por otro hilo."
    },
    {
        "question": "¿Cuál es la función del método `process_iter` en el módulo `psutil` en Python?",
        "type": "multiple-choice",
        "options": [
            "Iterar sobre las interfaces de red",
            "Iterar sobre los procesos activos",
            "Iterar sobre los archivos abiertos",
            "Iterar sobre las conexiones de red"
        ],
        "answer": 1,
        "explanation": "El método `process_iter` se utiliza para iterar sobre todos los procesos activos en el sistema."
    },
    {
        "question": "Crea un programa en Python que implemente un productor-consumidor utilizando una cola (`Queue`) donde el productor añade números del 1 al 10 y el consumidor los imprime.",
        "type": "code",
        "answer": "import threading\nimport queue\nimport time\n\ndef productor(q):\n    for i in range(1, 11):\n        q.put(i)\n        print(f'Productor añadió: {i}')\n        time.sleep(0.5)\n    q.put(None)  # Señal para el consumidor\n\ndef consumidor(q):\n    while True:\n        item = q.get()\n        if item is None:\n            break\n        print(f'Consumidor procesó: {item}')\n        q.task_done()\n\nq = queue.Queue()\n\nt_prod = threading.Thread(target=productor, args=(q,))\nt_cons = threading.Thread(target=consumidor, args=(q,))\n\nt_prod.start()\nt_cons.start()\n\nt_prod.join()\nq.join()\n",
        "validation": ["import queue", "threading.Thread", "q.put", "q.get"],
        "explanation": "El programa implementa un productor que añade números a una cola y un consumidor que los procesa, utilizando hilos para la concurrencia."
    },
    {
        "question": "¿Qué clase del módulo `socketserver` en Python se utiliza para manejar solicitudes de clientes utilizando streams de entrada y salida?",
        "type": "multiple-choice",
        "options": [
            "BaseRequestHandler",
            "StreamRequestHandler",
            "TCPRequestHandler",
            "UDPRequestHandler"
        ],
        "answer": 1,
        "explanation": "La clase `StreamRequestHandler` se utiliza para manejar solicitudes de clientes utilizando streams de entrada y salida."
    },
    {
        "question": "Crea un programa en Python que implemente un cliente UDP que envíe el mensaje 'Hola UDP Server' al servidor en `localhost` puerto `2000` y reciba una respuesta.",
        "type": "code",
        "answer": "import socket\n\ndef main():\n    HOST = '127.0.0.1'\n    PORT = 2000\n    mensaje = b'Hola UDP Server'\n    \n    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:\n        s.sendto(mensaje, (HOST, PORT))\n        datos, servidor = s.recvfrom(1024)\n        print(f'Recibido del servidor: {datos.decode()}')\n\nif __name__ == '__main__':\n    main()",
        "validation": ["import socket", "socket.socket", "s.sendto", "s.recvfrom"],
        "explanation": "El programa crea un cliente UDP que envía un mensaje al servidor y espera una respuesta, imprimiéndola luego."
    },
    {
        "question": "¿Qué método del objeto `threading.Event` en Python se utiliza para establecer el evento, permitiendo que los hilos que están esperando continúen su ejecución?",
        "type": "multiple-choice",
        "options": [
            "set",
            "clear",
            "wait",
            "toggle"
        ],
        "answer": 0,
        "explanation": "El método `set` del objeto `threading.Event` establece el evento, permitiendo que los hilos que están esperando continúen."
    },
    {
        "question": "Rellena el espacio en blanco: En Python, para crear una condición que permite a los hilos esperar y notificarse mutuamente, se utiliza la clase `______` del módulo `threading`.",
        "type": "fill-in-the-blank",
        "answer": "Condition",
        "explanation": "La clase `Condition` del módulo `threading` se utiliza para crear condiciones de espera y notificación entre hilos."
    },
    {
        "question": "Crea un programa en Python que implemente un cliente TCP que se conecte al servidor en `localhost` puerto `2000`, envíe el mensaje 'Hola Servidor' y espere la respuesta.",
        "type": "code",
        "answer": "import socket\n\ndef main():\n    HOST = '127.0.0.1'\n    PORT = 2000\n    mensaje = 'Hola Servidor'\n    \n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n        s.connect((HOST, PORT))\n        s.sendall(mensaje.encode('utf-8'))\n        datos = s.recv(1024)\n    \n    print(f'Recibido del servidor: {datos.decode()}')\n\nif __name__ == '__main__':\n    main()",
        "validation": ["import socket", "socket.socket", "s.connect", "s.sendall", "s.recv"],
        "explanation": "El programa crea un cliente TCP que se conecta a un servidor, envía un mensaje y espera una respuesta."
    }
]
